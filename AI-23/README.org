#+title: IF AI Module Notes =V1.5=
****** [[https://youtu.be/wpV-gGA4PSk][~Qianyi, 2i1. Have fun.]]
\\

-----
* I) Movement, Functions
*** /Defining Functions/
#+begin_quote
*ᴘᴀʀᴀᴍᴇᴛᴇʀ* -- predefined variables within func^{n} \\
*ᴀʀɢᴜᴍᴇɴᴛ* -- inputted values
#+end_quote
| ~return ...~ | ends function & reports back a value |
#+begin_src python
def calc_vector(a, b):  
    c = (a**2+b**2)**0.5
    return c
    
print(calc_vector(1, 1))
# 1.4142135623730951
#+end_src python

*** /Preset Functions/
| ~print(objects*)~ | prints out objects|
| ~angle()~ | returns the current angle in a numerical float^{(1)}, ranges 0 - 359 |
| ~set(x, y, angle)~ | |
| ~go(left, right, time)~ | move/turn/pivot |
| ~abs(num)~ | returns absolute/positive value |
| ~round(float)~ | rounds up/down a float^{(1)} |

#+begin_quote
(1) -- =float= is a numerical value, that has decimal places.
#+end_quote

\\
-----
* II) Variables & Lists
#+begin_src python
x = 10     # create an integer variable
x -= 5     # reassigns
print(x)   # using the variable
#+end_src python

*** /Datatypes/
- *ɪɴᴛᴇɢᴇʀ* / *ꜰʟᴏᴀᴛ*
- *ꜱᴛʀɪɴɢ*
- *ʟɪꜱᴛ* ~[]~
- *ʙᴏᴏʟᴇᴀɴ* -- ~True~ VS ~False~

*** /Numeric Operations/
| ~+~ | plus | ~-~ | minus |
| ~*~ | multiply | ~/~ | divide |
| ~**~ | exponent | ~%~ | modulo |
~x = x + 2~ can be written as ~x += 2~ /(applies to above)/

*** /Comparison Operators/
| | | ~==~ | equal to?  |
| ~<~ | less than? | ~<=~ | less/equal? |
| ~>~ | more than? | ~>=~ | more/equal? |

***** AVOID CONFUSION
+ ~=~ *ᴀꜱꜱɪɢɴᴍᴇɴᴛ* ᴏᴘᴇʀᴀᴛᴏʀ
+ ~==~ *ᴄᴏᴍᴘᴀʀɪꜱᴏɴ* ᴏᴘᴇʀᴀᴛᴏʀ

*** /Boolean Operators/
| ~A and B~ | both true? |
| ~A or B~ | either/both true? |
| ~not A~ | if ᴛʀᴜᴇ, return ꜰᴀʟꜱᴇ else ᴛʀᴜᴇ |

*** /Lists/
- Enclosed in ~[]~ with separating commas
- Index starts from *0* NOT 1.
| ~list[index]~ | access element, given index |
| ~list.append(val)~ | adds to end of list |
#+begin_src python
li = [0, 3, True, ['A', 'B']]
li.append(False)
print(li)        # [0, 1, True, ['A', 'B'], False]
print(li[3][1])  # 'B'
#+end_src

\\
-----
* III) Loops, Conditionals
- typically in loops, =go()= duration and power is *minimal*.
| ~range(start, stop, step)~ | a numerical sequence that excludes ~stop~ |
#+begin_src python
for i in range(5):
    ...
    
while A == True:
    ...
    ...
    "this is a nested conditional"
    if x == 0:      # if x is 0
        ...
    elif x >= 99:   # if x not 0, and not less than 99
        ...
    elif x != 50:   # if x not 0, and less than 99, and not equal 50
        ...
    else:           # runs in all False cases
        ...
#+end_src

\\
-----
* IV) Sensors
*** /Ultrasound/Distance/
#+begin_src py
get_ultrasound()[sensor]
#+end_src
| *0* ^{(f-left)} | *1* ^{(front)} | *2* ^{(f-right)} |
| | *3* ^{(rear)} | |
- *DIST_{moved} = INIT - END* ^{~sensor 2~}
- *DIST_{moved} = END - INIT* ^{~sensor 3~}
- reduce random error, take mean of *multiple* readings
#+begin_src python
def precise_results(i, count = 5):  # the higher the count, the more accurate (but laggier)
    total = 0
    for k in range(count):
        total += get_ultrasound()[i]
    return total/count
#+end_src

*** /Color/Intensity/
| *0* ^{(f-left)} | *1* ^{(left)} | *2* ^{(right)} | *3* ^{(f-right)} |
+ value range -- ~0 - 255~ *(dark to bright)*
+ in =[rgb]= parameter, red^{=0=}, green^{=1=}, blue^{=2=}
#+end_quote
#+begin_src py
get_color()[sensor][rgb]    # specificed colour strength
get_intensity()[sensor]     # average RGB strength
#+end_src

-----
