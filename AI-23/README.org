#+title: IF AI'23 Module Notes
****** [[https://youtu.be/wpV-gGA4PSk][V0.4, last updated 22/03/23]]
- ~concepts~
- ~common mistakes~

-----

* ~!~ ESSENTIAL CODE
#+begin_src python
def ultrasound(i):
    return (get_ultrasound()[i] + get_ultrasound()[i] + get_ultrasound()[i])/3

def turn_right():
    go(100, -100, 0.65)
    go(10, -10, 0.3)

def turn_left():
    go(-100, 100, 0.65)
    go(-10, 10, 0.3)
#+end_src

-----

* ˚ʚ Concepts ɞ˚
** Movement
#+begin_quote
*REDUCE POWER / TIME* /[be slower]/ in a loop for ACCURACY
#+end_quote
- ~go(left, right, time)~
- ~set(x, y, angle)~
- ~angle()~

** Loops

- ~range(start,stop,step)~ -- a num sequence, excludes ~stop~
- ~for i in range(5):~ -- repeats 5 times *(fixed #)*
- ~while A:~ -- repeats /while/ A is True, or /until/ A is False

** Ultrasound Sensor
- =get_ultrasound()[sensor]= -- includes /some random/ error
- SMALLER value ⇌ CLOSER dist
- use *AVERAGE* of =3= readings -- reduce error
#+begin_quote
*DIST_{moved} = START - END* ^{~2~} \\
*DIST_{moved} = END - START* ^{~3~}
#+end_quote
[[https://imgur.com/C3RRSEBl.jpg]]


** Color Sensor
#+begin_quote
sensors -- ~0 - 3~ (left to right)
#+end_quote
#+begin_quote
value range -- ~0 - 255~ *(dark to bright)*\\
threshold -- ~128~
#+end_quote
+ =get_color()[sensor][rgb]= -- /rgb:/ red_{~0~}, green_{~1~}, blue_{~2~}
+ =get_intensity()[sensor]= -- /brightness/ / ave RGB reading

-----

* ˚ʚ Common Mistakes ɞ˚
** Improper Syntax
#+begin_quote
Any =loop= and =condition= MUST have a =:=. \\
Calling a =function= MUST contain =()= /(may have parameters)/
#+end_quote
#+begin_src python
for i in range(5):      # note the :
    if True:            # note the :
        ultra = precise_results(0)      # note the ()
        ultra2 = get_ultrasound()[0]    # see the difference
#+end_src

** ~=~ OR ~==~
#+begin_quote
~=~ *assigns* a variable \\
~==~ *compares* whether 2 variables are equal
#+end_quote
#+begin_src python
i = 0          # note the =
print(i == 0)  # note the ==
#+end_src

** Dysfunctional Loops
#+begin_quote
/Rewrite/remove unnecessary loops./ \\
An obsolete =for= or a =while= loop in a =while= can *needlessly hinder* your program.
#+end_quote
#+begin_src python
while angle() < 50:
    for i in range(8):  # just remove this
        ...
...
#+end_src

** Classical Boolean Problem
#+begin_src python
def eval_not_numeric():
    if is_data_numeric == True:
        return False
    else:
        return True
#+end_src
#+begin_quote
The above is unnecessarily *inefficient*. /Do this instead:/
#+end_quote
#+begin_src python
def eval_not_numeric():
    return not is_data_numeric
    # not True -> False
    # not False -> True
#+end_src python

** Bruteforcing Hard Code
#+begin_quote
- Hardcoding is naively making straightforward code, but generally inefficient & unapplicable.
- To improve & get credited, you should really know *what* and *how* you are doing it. \\
/Consider the following situational code./
#+end_quote
#+begin_src python
go(100, 0, 4)
go(90, 10, 3)
go(80, 20, 4)
go(70, 30, 4)
go(60, 40, 4)
#+end_src
#+begin_quote
This makes for difficult reading. To *simplify* & *better understand* this, make a conditional ~for~ loop.
#+end_quote
#+begin_src python
for k in range(100, 50, -10):
    t = 4
    if k == 90:
        t = 3
    go(k, 100-k, t)
#+end_src

-----
